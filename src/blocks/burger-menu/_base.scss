@use "sass:math";

// Hamburger Styles
// ==================================================
.hamburger {
  padding: var(--padding-top) var(--padding-left);
  display: inline-block;
  cursor: pointer;
  z-index: var(--z-index-burger);
  position: relative;
  top: 0;
  left: 0;
  transition-property: opacity, filter;
  transition-duration: 0.15s;
  transition-timing-function: linear;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;

  // Hover effects - handled in CSS if possible, otherwise in JavaScript
  &:hover {
    filter: var(--hover-filter, none); // Default to no filter if var not set
    opacity: var(--hover-opacity, 1); // Default opacity
  }

  &.is-active {
    &:hover {
      filter: var(--active-hover-filter, none); // Active state filters
      opacity: var(--active-hover-opacity, 1); // Active state opacity
    }

    .hamburger-inner,
    .hamburger-inner::before,
    .hamburger-inner::after {
      background-color: var(--active-layer-color);
    }
  }
}

.hamburger-box {
  width: var(--width-burger);
  height: calc(var(--height-burger) * 3 + var(--spacing-burger) * 2);
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: calc(var(--height-burger) / -2);

  &,
  &::before,
  &::after {
    width: var(--width-burger);
    height: var(--height-burger);
    background-color: var(--layer-color);
    border-radius: var(--border-radius-burger);
    position: absolute;
    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: calc((var(--spacing-burger) + var(--height-burger)) * -1);
  }

  &::after {
    bottom: calc((var(--spacing-burger) + var(--height-burger)) * -1);
  }
}